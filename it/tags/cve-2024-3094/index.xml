<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>CVE-2024-3094 - Etichetta - appsec &amp; stuff</title><link>https://appsec.space/it/tags/cve-2024-3094/</link><description>CVE-2024-3094 - Etichetta - appsec &amp; stuff</description><generator>Hugo -- gohugo.io</generator><language>it</language><lastBuildDate>Sat, 30 Mar 2024 19:49:24 +0100</lastBuildDate><atom:link href="https://appsec.space/it/tags/cve-2024-3094/" rel="self" type="application/rss+xml"/><item><title>La backdoor di xz dalla prospettiva di un Security Engineer</title><link>https://appsec.space/it/posts/xz-backdoor/</link><pubDate>Sat, 30 Mar 2024 19:49:24 +0100</pubDate><author><name>himazawa</name></author><guid>https://appsec.space/it/posts/xz-backdoor/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/xz-backdoor/xz.png" referrerpolicy="no-referrer">
            </div><p>Come probablilmente già sai, <code>xz</code> è stato compromesso.
Per i non addetti ai lavori <code>xz</code> è una libreria per la compressione dei dati molto utilizzata sopratutto su Linux.</p>
<p>Il pacchetto è stato usato come entrypoint per l&rsquo;injection di codice malevolo in <code>sshd</code>, modificandone il flusso di autenticazione.</p>
<p>Questa vulnerabilità, introdotta deliberatamente attraverso una backdoor, è conosciuta come <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3094" target="_blank" rel="noopener noreferrer">CVE-2024-3094</a>.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">La situazione si sta ancora evolvendo, maggiori dettagli emergeranno nel prossimo futuro e aggiornerò il post di conseguenza.</div>
        </div>
    </div>
<p>Si tratta probabilmente di un&rsquo;operazione a tutti gli effetti vista la metodologia e la durata (quasi due anni), ma non sono la persona giusta per parlare di attributions,  OpSec e Threat Actors.
Nella sezione &ldquo;Risorse&rdquo; in fondo alla pagina ci sono link che riportano ad analisi più dettagliate.</p>
<p>La situazione non sembra rosea quindi sto provando a scrivere questo blogpost in modo tale da fare un pò di chiarezza.</p>
<p>Non voglio trattare aspetti troppo tecnici della compromissione ma voglio guardare alla issue dalla prospettiva di un Security Engineer, riassumendo cosa è andato storto e quali sono le possibili remediation a questo problema.</p>
<h2 id="timeline" class="headerLink">
    <a href="#timeline" class="header-mark"></a>1 Timeline</h2><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Controlla la sezione Risorse per i link ad una timeline più dettagliata</div>
        </div>
    </div>
<ul>
<li>
<p><strong>2023</strong>:</p>
<ul>
<li>Un nuovo maintainer appare sul progetto <code>xz</code></li>
<li>A new maintainer shows up in the <code>xz</code> project</li>
</ul>
</li>
<li>
<p><strong>29 Mar 2024</strong>:</p>
<ul>
<li>
<p>Andres Freund invia un&rsquo;email alla mailing list oss-security che riguarda una backdoor in <code>xz/liblzma</code>.
Stava ottimizzando la sua infrastruttura e si è accorto che ssh era &ldquo;sospettosamente&rdquo; lento (parliamo di 400ms di differenza, difficilmente notabili a meno che non si stia facendo micro ottimizzazione). Qualche debug dopo si è accorto che la problmatica di performace era probabilmente causata dal codice della backdoor. L&rsquo;analisi iniziale è stata fatta con l&rsquo;aiuto di Florian Weimer.</p>
</li>
<li>
<p>Le distribuzioni impattate (che quindi contenevano il pacchetto <code>xz</code>) hanno cominciato a rilasciare patch di downgrade a una versione precedente</p>
</li>
</ul>
</li>
<li>
<p><strong>30 Mar 2024</strong>:</p>
<ul>
<li>
<p>GitHub ha bloccato l&rsquo;accesso al repository e ha sospeso l&rsquo;account di entrambi i maintainer di <code>xz</code></p>
</li>
<li>
<p>Un <a href="https://tukaani.org/xz-backdoor/" target="_blank" rel="noopener noreferrer">comunicato ufficiale</a> è stato rilasciato dal maintainer del progetto</p>
</li>
</ul>
</li>
</ul>
<h2 id="componenti-impattate" class="headerLink">
    <a href="#componenti-impattate" class="header-mark"></a>2 Componenti impattate</h2><p>L&rsquo;estensione di questo breach è ancora poco chiaro di seguito è riportata una (parziale) lista dei componenti che contiengono la versione malevola di <code>xz</code>:</p>
<p>Distribuzioni:</p>
<ul>
<li>Arch</li>
<li><a href="https://security-tracker.debian.org/tracker/CVE-2024-3094" target="_blank" rel="noopener noreferrer">Debian Sid</a></li>
<li>Gentoo</li>
<li><a href="https://www.redhat.com/en/blog/urgent-security-alert-fedora-41-and-rawhide-users" target="_blank" rel="noopener noreferrer">Fedora 40</a></li>
<li>Manjaro Testing</li>
<li>Parabola</li>
<li>NixOS Unstable</li>
<li>Slackware</li>
<li><a href="https://news.opensuse.org/2024/03/29/xz-backdoor/" target="_blank" rel="noopener noreferrer">SUSE Tumbleweed</a></li>
<li><a href="https://infosec.exchange/@kalilinux/112180505434870941" target="_blank" rel="noopener noreferrer">Kali Linux</a></li>
</ul>
<p>Il pacchetto con la backdoor è inoltre contenuto nei seguenti package manager:</p>
<ul>
<li>Homebrew</li>
<li>MacPorts</li>
<li>pkgsrc</li>
</ul>
<p>Al momento sappiamo che ci sono dei controlli nel codice della backdoor che riguardano <a href="https://gist.github.com/thesamesam/223949d5a074ebc3dce9ee78baad9e27#design" target="_blank" rel="noopener noreferrer">specificatamente le istanze di Linux x86_64/amd64</a> quindi il numero dei target effettivi potrebbe essere ridotto (relativamente) ma la situazione è poco chiara, non raccomanderei di tenere un pacchetto compromesso sul sistema.</p>
<h2 id="considerazioni" class="headerLink">
    <a href="#considerazioni" class="header-mark"></a>3 Considerazioni</h2><h3 id="il-comportamento-di-github" class="headerLink">
    <a href="#il-comportamento-di-github" class="header-mark"></a>3.1 Il comportamento di GitHub</h3><p>Le ragioni dietro il blocco dei repository di <code>xz</code> è ancora un mistero per me, specialmente sapendo che con il codice disponibile è possibile anche fare ulteriori analisi e avere uno scenario più chiaro della compromissione.</p>
<p>Il blocco dell&rsquo;accesso ai sortgenti di <code>xz</code> è un fattore che rallenterà l&rsquo;arrivo delle analisi, che è un male  in una situazione time-critical come questa.</p>
<h3 id="i-downgrade" class="headerLink">
    <a href="#i-downgrade" class="header-mark"></a>3.2 I downgrade</h3><p>La patch strategy per praticamente tutti è stata di forzare il downgrade dalle versioni <code>5.6.0</code>-<code>5.6.1</code> ad una precedente.
Qualcuno(homebrew, per esempio), ha forzato il downgrade alla versione <code>5.4.6</code>.</p>
<p>Questo è interessante perchè sicurametne sappiamo che c&rsquo;è una backdoor sulle versioni <code>5.6.0</code>-<code>5.6.1</code>, ma sappiamo anche che l&rsquo;attaccante ha lavorato sul repository per più di due anni.</p>
<p>La versione <code>5.4.6</code>, ad esempio, è stata anch&rsquo;essa compilata dall&rsquo;attaccante e non dovrebbe essere considerata safe.
Ancora una volta, grazie GitHub per aver bloccato l&rsquo;accesso ai sorgenti e contribuito a far capire ancora meno la situazione.</p>
<h2 id="come-si-previene-questo-fenomeno" class="headerLink">
    <a href="#come-si-previene-questo-fenomeno" class="header-mark"></a>4 Come si previene questo fenomeno?</h2><p>Come ho detto all&rsquo;inizio del post, non voglio scendere troppo in profondità con l&rsquo;analisi tecnica della backdoor, per due ragioni principali: con l&rsquo;accesso al codice sorgente bloccato <a href="https://github.com/xz-mirror/xz" target="_blank" rel="noopener noreferrer">solo un archivio</a> (al momento della scrittura) è disponibile, le informazioni sono incomplete e non vorrei davvero reversare il binario di <code>xz</code>.</p>
<p>Inoltre, e questo è il motivo più importante, persone con più conoscienze di me sul modo di operare dei Threat Actors ci stanno già lavorando.
Non appena verranno pubblicati i primi articoli tecnici saranno disponibili nella sezione &ldquo;Risorse&rdquo;, in fondo alla pagina</p>
<p>Una cosa che però posso fare qui è mostrare il punto di vista di un Security Engineer sul problema, come avrei mitigato la situazione e quali step sono andati storti.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">TL;DR: non esiste una reale soluzione al problema</div>
        </div>
    </div>
<h3 id="problemi-di-fiducia" class="headerLink">
    <a href="#problemi-di-fiducia" class="header-mark"></a>4.1 Problemi di fiducia</h3><p><figure><a class="lightgallery" href="https://imgs.xkcd.com/comics/dependency_2x.png" title="https://imgs.xkcd.com/comics/dependency_2x.png" data-thumbnail="https://imgs.xkcd.com/comics/dependency_2x.png">
        <img
            
            loading="lazy"
            src="https://imgs.xkcd.com/comics/dependency_2x.png"
            srcset="https://imgs.xkcd.com/comics/dependency_2x.png, https://imgs.xkcd.com/comics/dependency_2x.png 1.5x, https://imgs.xkcd.com/comics/dependency_2x.png 2x"
            sizes="auto"
            alt="https://imgs.xkcd.com/comics/dependency_2x.png">
    </a></figure></p>
<p><code>xz</code> è un software mantenuto (fino al 2023) da una singola persona. Successivamente un altro maintainer è arrivato ma sfortunatamente per noi, è la stessa persona che ha inviato la backdoor upstream. Questo ovviamente va in conflitto col fatto che <code>xz</code> sia un pacchetto incredbilimente popolare in tantissime distribuzioni e parte delle dipednenze di numerosi software.</p>
<p>Probabilmente questo è stato visto dall&rsquo;attaccante come una miniera d&rsquo;oro dal momento che risultava facile riuscire a farsi affidare il ruolo di maintainer e pubblicare codice malevolo.</p>
<p>Dovendo fare affidamento a  codice di terze parti per la supply chain, è necessario avere fiducia in qualcuno a un certo punto.
Quando si parla di Supply Chain security, le raccomandazioni sono sempre le stesse: pin degli hash e verifica delle firme.</p>
<p>Questo funziona fino a quando ci troviamo in scenari dove un attaccante ha compromesso la CICD della dipedenza e invia build malevole, un account è stato compromesso etc.</p>
<p>Ma cosa si può fare se, tutto a un tratto, un maintainer fidato si rivela malevolo?</p>
<p>Da utente standard, a meno che tu non voglia (e sia capace) di fare code review a ogni singolo commit di ogni singolo pezzo di software con cui interagisce il tuo sistema operativo: più o meno nulla.</p>
<p>Dall&rsquo;altro lato, i developers e gli owner dei repsitory dovrebbero aumentare i controlli della loro supply chain includendo metriche più strette al fine di escludere pacchetti con alto rischio.</p>
<p>Una delle cose più ricorrenti che si sentono quando si parla si Open Source e Security sono le persone che credono che, dal momento che il codice sorgente è disponibile, magicamente risulta sicuro.</p>
<p>Uno dei fattori spesso trascurato è l&rsquo;assunzione che avere accesso al sorgente si traduce automaticamente in un pool maggiore di occhi che cercano problemi e vulnerabilità.</p>
<p>L&rsquo;efficacia di queste review dipende principamente dal livello di coinvolgimento della community e dall&rsquo;esperienza delle persone che poi quel codice effettivamente lo leggono, e di solito non è tanto. Molti progetti ricevono pochissima attenzione e solo pochi contribuiscono attivamente ai processi di review. Come risultato, le vulnerabilità (intenzionali o meno) possono passare inosservate per lunghi periodi di tempo, creando un rischio significante per gli utenti.</p>
<p>Ogni volta che una discussione come questa si riapre, mi torna in mente il <a href="https://blog.infosectcbr.com.au/2018/11/pitfalls-using-strcat.html" target="_blank" rel="noopener noreferrer">&ldquo;Mese di Kali&rdquo; di InfosectCBR</a>, dove <a href="https://twitter.com/silviocesare" target="_blank" rel="noopener noreferrer">Silvio Cesare</a> ha passato un mese a trovare e pubblicare vulnerabilità nei software contenuti nei repository di Kali Linux.</p>
<p>Di seguito riporto una lista (parziale) di fattori che potrebbero contribuire a ridurre il rischio:</p>
<h3 id="statistiche-di-github" class="headerLink">
    <a href="#statistiche-di-github" class="header-mark"></a>4.2 Statistiche di GitHub</h3><p>Giusto per essere chiaro fin dall&rsquo;inizio: No, non si può fare affidamento su queste metriche.</p>
<p>Esiste un mercato sulla compravendita di statistiche di GitHub come stelle, fork etc.
Puoi trovare un buon articolo qui: <a href="https://dagster.io/blog/fake-stars" target="_blank" rel="noopener noreferrer">https://dagster.io/blog/fake-stars</a></p>
<h3 id="engagement-della-community" class="headerLink">
    <a href="#engagement-della-community" class="header-mark"></a>4.3 Engagement della community</h3><p>Valutare sempre la dimensione e l&rsquo;engagement della community che circonda il progetto.</p>
<p>Una community grande ed attiva può fornire occhi aggiuntivi sulle code review, i bug report etc.</p>
<p><code>xz</code> aveva letteralmente 2 maintainers e uno dei due è risultato essere l&rsquo;attore malevolo.</p>
<h3 id="fondi-e-supporto" class="headerLink">
    <a href="#fondi-e-supporto" class="header-mark"></a>4.4 Fondi e supporto</h3><p>Condsiderare sempre l&rsquo;aspetto economico del progetto e da chi sta venendo finanziato. I progetti con dei fondi dedicati tendono ad avere risorse aggiuntive per i security audit e la manutenzione del codice e soprattutto è meno probabile che vengano abbandonati.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Ricorda: si vuole fare affidamento su quel codice per l&rsquo;intera settimana, non solo durante il tempo libero del maintainer. I progetti con un buon supporto finanziario è molto più probabile divengano lavori a tempo pieno che solo hobby da portare avanti sporadicamente.</div>
        </div>
    </div>
<h3 id="sdlc" class="headerLink">
    <a href="#sdlc" class="header-mark"></a>4.5 SDLC</h3><p>Una buona porzione della valutazione dovrebbe concentrarsi sul ciclo si sviluppo del software per assicurarsi che i gate (di sicurezza e qualità più in generale) siano implementati correttamente, le pull request abbiano bisogno di approvazione e ci siano delle pratiche sane che non permettano ad un singolo contributor di inviare codice malevolo senza approvazione.</p>
<p>Inoltre è necessario tenere in cosiderazione che siamo umani e commettiamo errori. Passare una code review non significa automaticamente che il codice sia sicuro, come ho detto prima: non esiste una vera soluzione al problema, solo modi per abbassare la probabilità che le cose brutte accadano.</p>
<h3 id="enterprise-vs-individual" class="headerLink">
    <a href="#enterprise-vs-individual" class="header-mark"></a>4.6 Enterprise vs Individual</h3><p>Questo è un argomento abbastanza controverso perchè ci sono progetti mantenuti da persone individuali che sono ben strutturati.
Di solito però, utilizzando cdice prodotto da (grandi) aziende renderà più probabile l&rsquo;avere delle best practice di sviluppo, avere un continuo stream di fondi per mantenere il progetto in piedi e soprattuto difficilmente una grande azienda metterebbe una backdoor di proposito nel proprio codice. Di nuovo, questo aumenta solo le probabilità, non va preso come concetto assoluto ;)</p>
<h3 id="controlli-ricorsivi" class="headerLink">
    <a href="#controlli-ricorsivi" class="header-mark"></a>4.7 Controlli Ricorsivi</h3><p>Il progetto che stai includendo probabilmente avrà anch&rsquo;esso delle dipendenze, assicurati che i maintainers applichino a loro volta lo stesso scrutinio sulla loro supply chain per evitare compromissioni indirette.</p>
<h2 id="risorse" class="headerLink">
    <a href="#risorse" class="header-mark"></a>5 Risorse</h2><ul>
<li>OSS-Security List: <a href="https://www.openwall.com/lists/oss-security/2024/03/29/4" target="_blank" rel="noopener noreferrer">https://www.openwall.com/lists/oss-security/2024/03/29/4</a></li>
<li>Comprehensive timeline: <a href="https://boehs.org/node/everything-i-know-about-the-xz-backdoor" target="_blank" rel="noopener noreferrer">https://boehs.org/node/everything-i-know-about-the-xz-backdoor</a></li>
<li>Compromise link roundup: <a href="https://shellsharks.com/xz-compromise-link-roundup" target="_blank" rel="noopener noreferrer">https://shellsharks.com/xz-compromise-link-roundup</a></li>
<li>Obfuscation Analysis: <a href="https://gynvael.coldwind.pl/?lang=en&amp;id=782" target="_blank" rel="noopener noreferrer">https://gynvael.coldwind.pl/?lang=en&id=782</a></li>
<li>Backdoor Analysis: <a href="https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504" target="_blank" rel="noopener noreferrer">https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504</a></li>
</ul>]]></description></item></channel></rss>